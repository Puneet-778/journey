#!csharp

#r "nuget: Interactive.Journey"
#r "nuget: Interactive.Extension.ImageSharp, *-*"

#!csharp

using Microsoft.DotNet.Interactive.Journey;
using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Commands;
using Microsoft.DotNet.Interactive.CSharp;
using Microsoft.DotNet.Interactive.Events;
using SixLabors.ImageSharp;
using System.IO;

#!csharp

public class TreeNode{
    public int data;
    public TreeNode left;
    public TreeNode right;
    public TreeNode(int data, TreeNode left, TreeNode right){
        this.data = data;
        this.left = left;
        this.right = right;
    }
}

#!markdown

# [Challenge] Validate Binary Search Tree

#!csharp

Func<TreeNode, Boolean> ValidateBST = root => false;

#!csharp

Lesson.CurrentChallenge.AddRule("Checking whether given Binary tree is BST or not", context =>
{   
    // constructing Sample binary Tree
    //         50
    //       /    \
    //      25     75
    //     / \     / \
    //    13  37  63  87
    //            /\
    //          55  70


    var LeftSubTree = new TreeNode(25, new TreeNode(13, null, null), new TreeNode(37, null, null));
    var RightSubTree = new TreeNode(75, new TreeNode(63, new TreeNode(55, null, null), new TreeNode(70, null, null)), new TreeNode(87, null, null));
    var sample = new TreeNode(50, LeftSubTree, RightSubTree);

    var correctans = true;

    var ans = ValidateBST(sample);
    
    if (correctans ==  ans)
    {
        context.Pass("Correct answer!");
    }
    else
    {
        context.Fail("Incorrect answer","Remember : Both the left and right subtrees must also be binary search trees.");
        
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
    {
        var numPassed = context.RuleEvaluations.Count(e => e.Passed);
        var total = context.RuleEvaluations.Count();
        // var history = context.SubmissionHistory ....
        if (total == numPassed)
        {
            context.SetMessage("Challenge 1 completed! Proceed to next Challenge.");
            await context.StartNextChallengeAsync();
        }
        else
        {
            context.SetMessage("Challenge 1 not complete");
        }
    });

#!markdown

## [Question]

#!markdown

# Challenge 1 : Check if a binary tree is BST or not 

#!markdown

In this challenge, you will be writing an algorithm to check whether a given binary tree is binary search tree or not. 

A binary search tree (BST) is a node based binary tree data structure which has the following properties : 

=> The left subtree of a node contains only nodes with keys less than the node’s key. 

=> The right subtree of a node contains only nodes with keys greater than the node’s key.

=> Both the left and right subtrees must also be binary search trees.

The type you will be working with is `TreeNode`. It represents the root node of the binary tree rooted at that node. It has an integer property `data` representing the node's value. It also has the properties `left` and `right` that represents the left and right subtrees.

Your will write your answer as a lambda and assign it to `ValidateBST`. The lambda should have type `Func<TreeNode, Boolean>`.

It should return true or false based on whether given binary tree is BST or not.

#!csharp

ValidateBST = root =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

## [Scratchpad]

#!csharp

#!model-answer
// this should pass
Boolean helper(TreeNode root, int min, int max){
    if(root == null){
        return true;
    }

    if(root.data < min || root.data > max){
        return false;
    }

    Boolean x = helper(root.left, min, root.data-1);
    Boolean y = helper(root.right, root.data + 1, max);

    return x && y;
}

ValidateBST = root => 
{
   return helper(root, Int32.MinValue, Int32.MaxValue);
    
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Search in Binary Search Tree

#!csharp

Func<TreeNode,int, Boolean> SearchBST = (root, key) => false;

#!csharp

Lesson.CurrentChallenge.AddRule("Searching in Binary Search Tree", context =>
{   
    // constructing Sample binary Tree
    //         50
    //       /    \
    //      25     75
    //     / \     / \
    //    13  37  63  87
    //            /\
    //          55  70


    var LeftSubTree = new TreeNode(25, new TreeNode(13, null, null), new TreeNode(37, null, null));
    var RightSubTree = new TreeNode(75, new TreeNode(63, new TreeNode(55, null, null), new TreeNode(70, null, null)), new TreeNode(87, null, null));
    var sample = new TreeNode(50, LeftSubTree, RightSubTree);

    int key = 63;

    var correctans = true;

    var ans = SearchBST(sample, key);
    
    if (correctans ==  ans)
    {
        context.Pass("Correct answer!");
    }
    else
    {
        context.Fail("Incorrect answer","Remember : Properties of BST");
        
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
    {
        var numPassed = context.RuleEvaluations.Count(e => e.Passed);
        var total = context.RuleEvaluations.Count();
        // var history = context.SubmissionHistory ....
        if (total == numPassed)
        {
            context.SetMessage("Challenge 2 completed! Proceed to next Challenge.");
            await context.StartNextChallengeAsync();
        }
        else
        {
            context.SetMessage("Challenge 2 not complete");
        }
    });

#!markdown

## [Question]

#!markdown

# Challenge 2 : Search a given key in BST

#!markdown

In this challenge, you will be writing an algorithm to check whether a given key is present in binary search tree or not. 

A binary search tree (BST) is a node based binary tree data structure which has the following properties : 

=> The left subtree of a node contains only nodes with keys less than the node’s key. 

=> The right subtree of a node contains only nodes with keys greater than the node’s key.

=> Both the left and right subtrees must also be binary search trees.

The type you will be working with is `TreeNode`. It represents the root node of the binary tree rooted at that node. It has an integer property `data` representing the node's value. It also has the properties `left` and `right` that represents the left and right subtrees.

Your will write your answer as a lambda and assign it to `SearchBST`. The lambda should have type `Func<TreeNode, int, Boolean>`.

It should return true or false based on whether given key is present in BST or not.

Note: Use property of BST.

#!csharp

SearchBST = (root, key) =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

## [Scratchpad]

#!csharp

#!model-answer
// this should pass


SearchBST = (root, key) => 
{
   if(root == null){
        return false;
   }

   if(root.data == key){
       return true;
   }

   if(key < root.data){
       return SearchBST(root.left, key);
   }

   return SearchBST(root.right, key);
    
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Lowest Common Ancestor

#!csharp

Func<TreeNode, int, int, TreeNode> LCA = (root, key1, key2) => null;

#!csharp

Lesson.CurrentChallenge.AddRule("LCA of two nodes in BST", context =>
{   
    // constructing Sample binary Tree
    //         50
    //       /    \
    //      25     75
    //     / \     / \
    //    13  37  63  87
    //            /\
    //          55  70


    var LeftSubTree = new TreeNode(25, new TreeNode(13, null, null), new TreeNode(37, null, null));
    var RightSubTree = new TreeNode(75, new TreeNode(63, new TreeNode(55, null, null), new TreeNode(70, null, null)), new TreeNode(87, null, null));
    var sample = new TreeNode(50, LeftSubTree, RightSubTree);

    int key1 = 55;
    int key2 = 87;

    var correctans = 75;

    var ans = LCA(sample, key1, key2);
    
    if (correctans ==  ans.data)
    {
        context.Pass("Correct answer!");
    }
    else
    {
        context.Fail("Incorrect answer","Remember : Properties of BST");
        
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
    {
        var numPassed = context.RuleEvaluations.Count(e => e.Passed);
        var total = context.RuleEvaluations.Count();
        // var history = context.SubmissionHistory ....
        if (total == numPassed)
        {
            context.SetMessage("Challenge 3 completed! Proceed to next Challenge.");
            await context.StartNextChallengeAsync();
        }
        else
        {
            context.SetMessage("Challenge 3 not complete");
        }
    });

#!markdown

## [Question]

#!markdown

# Challenge 3 : Lowest common ancestor (LCA) of two given nodes in the BST.

#!markdown

In this challenge, you will be writing an algorithm to find Lower Common Ancestor (LCA) of two given nodes in the BST. 

“The lowest common ancestor is defined between two nodes p and q as the lowest node in Tree that has both p and q as descendants (where we allow a node to be a descendant of itself).”

A binary search tree (BST) is a node based binary tree data structure which has the following properties : 

=> The left subtree of a node contains only nodes with keys less than the node’s key. 

=> The right subtree of a node contains only nodes with keys greater than the node’s key.

=> Both the left and right subtrees must also be binary search trees.

The type you will be working with is `TreeNode`. It represents the root node of the binary tree rooted at that node. It has an integer property `data` representing the node's value. It also has the properties `left` and `right` that represents the left and right subtrees.

Your will write your answer as a lambda and assign it to `LCA`. The lambda should have type `Func<TreeNode, int, int, TreeNode>`.

It should return LCA of two given nodes.

Note: Use property of BST.

All nodes in BST are unique.

key1 != key2

key1 and key2 will exist in the BST.

#!csharp

LCA = (root, key1, key2) =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

## [Scratchpad]

#!csharp

#!model-answer
// this should pass


LCA = (root, key1, key2) => 
{
   if(key1 > root.data && key2 > root.data){
       return LCA(root.right, key1, key2);
   }else if(key1 < root.data && key2 < root.data){
       return LCA(root.left, key1, key2);
   }
   
   return root;
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Inorder Successor in BST

#!csharp

Func<TreeNode, int, TreeNode> Successor = (root, key) => null;

#!csharp

Lesson.CurrentChallenge.AddRule("Inorder Successor of given node in BST", context =>
{   
    // constructing Sample binary Tree
    //         50
    //       /    \
    //      25     75
    //     / \     / \
    //    13  37  63  87
    //            /\
    //          55  70


    var LeftSubTree = new TreeNode(25, new TreeNode(13, null, null), new TreeNode(37, null, null));
    var RightSubTree = new TreeNode(75, new TreeNode(63, new TreeNode(55, null, null), new TreeNode(70, null, null)), new TreeNode(87, null, null));
    var sample = new TreeNode(50, LeftSubTree, RightSubTree);

    int key = 70;

    var correctans = 75;

    var ans = Successor(sample, key);
    
    if (correctans ==  ans.data)
    {
        context.Pass("Correct answer!");
    }
    else
    {
        context.Fail("Incorrect answer", "Remember : Inorder of BST is in ascending order!");
        
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
    {
        var numPassed = context.RuleEvaluations.Count(e => e.Passed);
        var total = context.RuleEvaluations.Count();
        // var history = context.SubmissionHistory ....
        if (total == numPassed)
        {
            context.SetMessage("Challenge 4 completed! Proceed to next Challenge.");
            await context.StartNextChallengeAsync();
        }
        else
        {
            context.SetMessage("Challenge 4 not complete");
        }
    });

#!markdown

## [Question]

#!markdown

# Challenge 4 : Inorder Successor in BST

#!markdown

In this challenge, you will be given a binary search tree and the value of node in it, find the in-order successor of that node in the BST.

If the given node has no in-order successor in the tree, return null.

A binary search tree (BST) is a node based binary tree data structure which has the following properties : 

=> The left subtree of a node contains only nodes with keys less than the node’s key. 

=> The right subtree of a node contains only nodes with keys greater than the node’s key.

=> Both the left and right subtrees must also be binary search trees.

The type you will be working with is `TreeNode`. It represents the root node of the binary tree rooted at that node. It has an integer property `data` representing the node's value. It also has the properties `left` and `right` that represents the left and right subtrees.

Your will write your answer as a lambda and assign it to `Successor`. The lambda should have type `Func<TreeNode, int, TreeNode>`.

It should return inorder successor of the given node.

Note: Use property of BST.

All nodes in BST are unique.

Eg.

         50
       /    \
      25     75
     / \     / \
    13  37  63  87
            /\
          55  70

          inorder successor of node 55 is 63.

          inorder successor of node 70 is 75.

#!csharp

Successor = (root, key) =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

## [Scratchpad]

#!csharp

#!model-answer
// this should pass

TreeNode prev = null;
void traverse(TreeNode root, int key){
    if(root == null){
        return;
    }
    
    traverse(root.left, key);

    if(root.data > key){
        if(prev == null)
           prev = root;
        
        return;
    }

    traverse(root.right, key);
}
Successor = (root, key) => 
{
    traverse(root, key);
    return prev;
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Predecessor(Inoredr) in BST

#!csharp

Func<TreeNode, int, TreeNode> Predecessor = (root, key) => null;

#!csharp

Lesson.CurrentChallenge.AddRule("Inorder Predecessor of given node in BST", context =>
{   
    // constructing Sample binary Tree
    //         50
    //       /    \
    //      25     75
    //     / \     / \
    //    13  37  63  87
    //            /\
    //          55  70


    var LeftSubTree = new TreeNode(25, new TreeNode(13, null, null), new TreeNode(37, null, null));
    var RightSubTree = new TreeNode(75, new TreeNode(63, new TreeNode(55, null, null), new TreeNode(70, null, null)), new TreeNode(87, null, null));
    var sample = new TreeNode(50, LeftSubTree, RightSubTree);

    int key = 55;

    var correctans = 50;

    var ans = Predecessor(sample, key);
    
    if (correctans ==  ans.data)
    {
        context.Pass("Correct answer!");
    }
    else
    {
        context.Fail("Incorrect answer", "Remember : Inorder of BST is in ascending order!");
        
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
    {
        var numPassed = context.RuleEvaluations.Count(e => e.Passed);
        var total = context.RuleEvaluations.Count();
        // var history = context.SubmissionHistory ....
        if (total == numPassed)
        {
            context.SetMessage("Challenge 5 completed! Proceed to next Challenge.");
            await context.StartNextChallengeAsync();
        }
        else
        {
            context.SetMessage("Challenge 5 not complete");
        }
    });

#!markdown

## [Question]

#!markdown

# Challenge 5 : Inorder Predecessor in BST

#!markdown

In this challenge, you will be given a binary search tree and the value of node in it, find the in-order predecessor of that node in the BST.

If the given node has no in-order predecessor in the tree, return null.

A binary search tree (BST) is a node based binary tree data structure which has the following properties : 

=> The left subtree of a node contains only nodes with keys less than the node’s key. 

=> The right subtree of a node contains only nodes with keys greater than the node’s key.

=> Both the left and right subtrees must also be binary search trees.

The type you will be working with is `TreeNode`. It represents the root node of the binary tree rooted at that node. It has an integer property `data` representing the node's value. It also has the properties `left` and `right` that represents the left and right subtrees.

Your will write your answer as a lambda and assign it to `Predecessor`. The lambda should have type `Func<TreeNode, int, TreeNode>`.

It should return inorder predecessor of the given node.

Note: Use property of BST.

All nodes in BST are unique.

Eg.

         50
       /    \
      25     75
     / \     / \
    13  37  63  87
            /\
          55  70

          inorder predecessor of node 55 is 50.

          inorder predecessor of node 70 is 63.
          

#!csharp

Predecessor = (root, key) =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

## [Scratchpad]

#!csharp

#!model-answer
// this should pass

TreeNode prev = null;

void traverse(TreeNode root, int key){
    if(root == null){
        return;
    }
    
    traverse(root.left, key);

    if(root.data < key){
        prev = root;
    }else{
        return;
    }

    traverse(root.right, key);
}
Predecessor = (root, key) => 
{
    traverse(root, key);
    return prev;
};

#!csharp

Lesson.ResetChallenge();
