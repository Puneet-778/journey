#!csharp

#r "nuget: Interactive.Journey"
#r "nuget: Interactive.Extension.ImageSharp"

#!csharp

using Microsoft.DotNet.Interactive.Journey;
using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Commands;
using Microsoft.DotNet.Interactive.CSharp;
using Microsoft.DotNet.Interactive.Events;
using SixLabors.ImageSharp;
using System.IO;

#!markdown

# [Challenge] Palindrome

#!csharp

Func<int,bool> CheckIfPalindrome = num => false;

#!csharp

Lesson.CurrentChallenge.AddRule("Checking for Palindrome", context =>
{
    var correctAns = true;
    var num = 76367;
    var ans = CheckIfPalindrome(num);

    if (ans == correctAns)
    {
        context.Pass("Correct Answer");
    }
    else
    {
        context.Fail("Wrong answer", 
        "Try using two pointers to solve this problem: one at the beginning of the string and other at the end. What can you do from here?");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 13 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 13 not complete");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 13 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 13 not complete");
    }
});

#!markdown

# [Question]

#!markdown

# Challenge 1: Check if the given number is Palindrome or not

#!csharp

CheckIfPalindrome = num =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

# [Scratchpad]

#!csharp

#!model-answer
// this should pass

CheckIfPalindrome = num => 
{   
    int r,sum=0,t;
    for(t=num;num!=0;num=num/10){
         r=num % 10;
         sum=sum*10+r;
    }
	if(t==sum)
         return true;
    else
         return false;	
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Armstrong

#!csharp

Func<int,bool> CheckIfArmStrong = num => false;

#!csharp

Lesson.CurrentChallenge.AddRule("Checking for Armstrong", context =>
{
    var correctAns = true;
    var num = 371;
    var ans = CheckIfArmStrong(num);

    if (ans == correctAns)
    {
        context.Pass("Correct Answer");
    }
    else
    {
        context.Fail("Wrong answer", 
        "Try using two pointers to solve this problem: one at the beginning of the string and other at the end. What can you do from here?");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 2 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 2 not complete");
    }
});

#!markdown

# [Question]

#!markdown

# Challenge 2: Check if the given number is Armstrong number or not

#!markdown

# [Scratchpad]

#!csharp

#!model-answer
// this should pass

CheckIfArmStrong = num => 
{   
    int r,sum=0,temp;
    temp=num;      
       while(num>0)      
       {      
        r=num%10;      
        sum=sum+(r*r*r);      
        num=num/10;
       }      
       if(temp==sum)      
        return true;      
       else      
        return false;	
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Prime Number

#!csharp

Func<int,bool> CheckIfPrime = num => false;

#!csharp

Lesson.CurrentChallenge.AddRule("Checking for Prime", context =>
{
    var correctAns = true;
    var num = 17;
    var ans = CheckIfPrime(num);

    if (ans == correctAns)
    {
        context.Pass("Correct Answer");
    }
    else
    {
        context.Fail("Wrong answer", 
        "Try using two pointers to solve this problem: one at the beginning of the string and other at the end. What can you do from here?");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 2 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 2 not complete");
    }
});

#!markdown

# [Question]

#!markdown

# Challenge 3: Check if the given number is Prime number or not

#!markdown

# [Scratchpad]

#!csharp

#!model-answer
// this should pass

CheckIfPrime = num => 
{   
    int i,ctr=0;
    for(i=2;i<=num/2;i++){
        if(num % i==0){
         ctr++;
            break;
        }
    }
    if(ctr==0 && num!= 1)
        return true;
   else
      return false;     	
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Reverse a Number

#!csharp

Func<int,int> ReverseNum = num => 321;

#!csharp

Lesson.CurrentChallenge.AddRule("Reverse the Number", context =>
{
    var correctAns = 321;
    var num = 123;
    var ans = ReverseNum(num);

    if (ans == correctAns)
    {
        context.Pass("Correct Answer");
    }
    else
    {
        context.Fail("Wrong answer", 
        "Try using two pointers to solve this problem: one at the beginning of the string and other at the end. What can you do from here?");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 2 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 2 not complete");
    }
});

#!markdown

# [Question]

#!markdown

# Challenge 3: Reverse the give number

#!markdown

# [Scratchpad]

#!csharp

#!model-answer
// this should pass

ReverseNum = num => 
{   
    int  reverse=0, rem;       
       while(num!=0)      
       {      
        rem=num%10;        
        reverse=reverse*10+rem;      
        num/=10;      
       }      
       return reverse;        	
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Least common multiple

#!csharp

Func<int,int,int> LcmNum = (num1,num2) => 6;

#!csharp

Lesson.CurrentChallenge.AddRule("Least Common Multiple", context =>
{
    var correctAns = 6;
    var num1 = 2;
    var num2= 3;
    var ans = LcmNum(num1,num2);

    if (ans == correctAns)
    {
        context.Pass("Correct Answer");
    }
    else
    {
        context.Fail("Wrong answer", 
        "Try using two pointers to solve this problem: one at the beginning of the string and other at the end. What can you do from here?");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 2 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 2 not complete");
    }
});

#!markdown

# [Question]

#!markdown

# Challenge 3: Find the LCM of the 2 numbers

#!markdown

# [Scratchpad]

#!csharp

#!model-answer
// this should pass

LcmNum = (num1,num2) => 
{   
    int i,max, lcm=1;      
    max = (num1>num2) ? num1 : num2;  
    for(i=max;  ; i+=max)  
    {  
        if(i%num1==0 && i%num2==0)  
        {  
            lcm = i;  
            break;  
        }  
    } 
    return lcm;	
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Highest Common Factor

#!csharp

Func<int,int,int> HcfNum = (num1,num2) => 2;

#!csharp

Lesson.CurrentChallenge.AddRule("Highest Common Factor", context =>
{
    var correctAns = 2;
    var num1 = 10;
    var num2= 14;
    var ans = HcfNum(num1,num2);

    if (ans == correctAns)
    {
        context.Pass("Correct Answer");
    }
    else
    {
        context.Fail("Wrong answer", 
        "Try using two pointers to solve this problem: one at the beginning of the string and other at the end. What can you do from here?");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 2 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 2 not complete");
    }
});

#!markdown

# [Question]

#!markdown

# Challenge 3: Find the HCF of the 2 numbers

#!markdown

# [Scratchpad]

#!csharp

#!model-answer
// this should pass

LcmNum = (num1,num2) => 
{   
    int i,j, hcf=1;      
    j = (num1<num2) ? num1 : num2;  
    for(i=1; i<=j; i++)  
    {  
        if(num1%i==0 && num2%i==0)  
        {  
            hcf = i;  
        }  
    }  
    return hcf;  	
};

#!csharp

Lesson.ResetChallenge();
