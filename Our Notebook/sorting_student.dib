#!csharp

#r "nuget: Interactive.Journey"

#!csharp

#!start-lesson --from-file "sorting_teacher.dib"

#!markdown

# Bubble Sort

#!markdown

### **What is bubble sort?**  

Bubble sort is a sorting algorithm that works on the principle of the lighter (smaller) elements “bubbling up” or “floating up” to one end of the array,  
depending on the sorting order.  
This algorithm is not very efficient (quadratic time complexity) but it is still considered a fundamental sorting algorithm due to its methodical nature. 

#!markdown

### **How does it work?**  

For the purpose of these challenges, we shall assume that our goal is to sort arrays in ascending order. To that end, the bubble sort algorithm works in the following manner:  

1. **First Iteration: Compare and Swap**  
Starting from the first index, compare the first and the second elements.  
If the first element is greater than the second element, they are swapped.  
Now, compare the second and the third elements. Swap them if they are not in order.
The above process goes on until the last element.  

2. **Remaining Iteration**   
The same process goes on for the remaining iterations.  
After each iteration, the largest element among the unsorted elements is placed at the end.  
In each iteration, the comparison takes place up to the last unsorted element.  
The array is sorted when all the unsorted elements are placed at their correct positions.

#!markdown

# Challenge 1: Bubble Sort 
In this exercise, you’ll implement the bubble sort algorithm in ascending order.  
The type you will be working with is 'int[]' representing an integer array.  

The answer is to be written as a lambda and assigned to **'Sorting'**.  
The lambda has the type 'Func<int[],int[]>'.  
### Sample Output:  
Input Array :
[5,15,2,6,9,17,20]  
Output Array (to be returned) :  
[2,5,6,9,15,17,20]  

#!csharp

Sorting = inputArray =>
{
    throw new NotImplementedException(); // write your answer here
};
