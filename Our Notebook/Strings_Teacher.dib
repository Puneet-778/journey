#!csharp

#r "nuget: Interactive.Journey"
#r "nuget: Interactive.Extension.ImageSharp"

#!csharp

using Microsoft.DotNet.Interactive.Journey;
using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Commands;
using Microsoft.DotNet.Interactive.CSharp;
using Microsoft.DotNet.Interactive.Events;
using SixLabors.ImageSharp;
using System.IO;

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Count Even and Odd numbers

#!csharp

Func<int[],IEnumerable<int>> EvenOdd = str => new int[2];

#!csharp

Lesson.CurrentChallenge.AddRule("Checking for number of vowels and consonents", context =>
{
    var correctAns = new int[]{5,4};
    var inputArray = new int[]{1,2,6,1,3,11,90,13,18};
    var ans = CountVowelsNConsonants(inputArray);

    if (correctAns.All(ans.Contains) && correctAns.Count() == ans.Count())
    {
        context.Pass("Correct count of Even and odd ");
    }
    else
    {
        context.Fail("Incorrect count of Even and Odd", 
        "Use If-else statements");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 1 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 1 not complete");
    }
});

#!markdown

# [Question]

#!markdown

# Challenge 1: Count of Even and Odd numbers in the array

#!markdown

XYZ

#!csharp

EvenOdd = inputArray =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

# [Scratchpad]

#!csharp

#!model-answer
// this should pass

EvenOdd = inputArray => 
{   
    var even = 0;
    var odd = 0; 
    foreach( var c in inputArray){
        if(c % 2 == 0)
        even++;
        else odd++;
    }
    return new int[]{odd, even};
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Count vowels and consonants

#!csharp

Func<string,IEnumerable<int>> CountVowelsNConsonants = str => new int[2];

#!csharp

Lesson.CurrentChallenge.AddRule("Checking for number of vowels and consonents", context =>
{
    var correctAns = new int[]{3,6};
    var str = "Microsoft";
    var ans = CountVowelsNConsonants(str);

    if (correctAns.All(ans.Contains) && correctAns.Count() == ans.Count())
    {
        context.Pass("Correct count of vowels and consonents");
    }
    else
    {
        context.Fail("Incorrect count of vowels and consonents", 
        "Use If-else statements");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 1 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 1 not complete");
    }
});

#!markdown

# [Question]

#!markdown

# Challenge 1:  Count the total number of Vowels and Consonants present in the string

#!markdown

XYZ

#!csharp

CountVowelsNConsonants = str =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

# [Scratchpad]

#!csharp

#!model-answer
// this should pass

CountVowelsNConsonants = str => 
{   
    var vowels = 0;
    var consonants = 0; 
    foreach( var c in str){
        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||  c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')
        vowels++;
        else consonants++;
    }
    return new int[]{vowels, consonants};
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Palindrome

#!csharp

Func<string,bool> CheckIfPalindrome = str => false;

#!csharp

Lesson.CurrentChallenge.AddRule("Checking for Palindrome", context =>
{
    var correctAns = true;
    var str = "naman";
    var ans = CheckIfPalindrome(str);

    if (ans == correctAns)
    {
        context.Pass("Correct Answer");
    }
    else
    {
        context.Fail("Wrong answer", 
        "Try using two pointers to solve this problem: one at the beginning of the string and other at the end. What can you do from here?");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 2 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 2 not complete");
    }
});

#!markdown

# [Question]

#!markdown

# Challenge 2: Check of the given string is Palindrome

#!markdown

XYZ

#!csharp

CheckIfPalindrome = str =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

# [Scratchpad]

#!csharp

#!model-answer
// this should pass

CheckIfPalindrome = str => 
{   
    int i = 0, j = str.Count()-1;
	while(i<=j){
		if(str[i++]!=str[j--])return false;
	}
	return true;
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Caesar Cipher Encryptor

#!csharp

Func<string,int,string> CaesorCipher = (str,key) => "";

#!csharp

Lesson.CurrentChallenge.AddRule("Checking for Caesar Cipher", context =>
{
    var correctAns = "zylbcipjkyycbhpvlvplzpvujpjvywplvcplvywplyvplquplvwthw";
    var str = "kjwmntauvjjnmsagwgawkagfuaugjhawgnawgjhawjgawbfawghesh";
    var key = 15;
    var ans = CaesorCipher(str,key);

    if (ans == correctAns)
    {
        context.Pass("Correct Answer");
    }
    else
    {
        context.Fail("Wrong answer", 
        "How do you handle cases where a letter gets shifted to a position that requires wrapping around the alphabet? What about the case when the key is very large and causes multiple wrappings around the alphabet? The MODULO operator should be your friend here.");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 3 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 3 not complete");
    }
});

#!markdown

# [Question]

#!markdown

# Challenge 3: Caesar Cipher Encryption

#!markdown

XYZ

#!csharp

CaesorCipher = (str,key) =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

# [Scratchpad]

#!csharp

#!model-answer
// this should pass

CaesorCipher = (str,key) => 
{   
    StringBuilder output = new StringBuilder();
    int newKey = key%26;
    for(int i = 0;i<str.Count();i++){
        int newLetterCode = str[i] + key;
        char c = (char)(newLetterCode<=122? newLetterCode:96+newLetterCode%122);
        output.Append(c);
    }
    return output.ToString();
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] Two Number Sum

#!csharp

Func<int[],int,IEnumerable<int>> TwoSum = (inputArray,targetSum) => new int[2];

#!csharp

Lesson.CurrentChallenge.AddRule("Checking for Two Sum", context =>
{
    var correctAns = new int[]{-1,11};
    var array = new int[]{3,5,-4,8,11,1,-1,6};
    var targetSum = 10;
    var ans = TwoSum(array,targetSum);

    if (ans.Count() == correctAns.Count() && ans.All(correctAns.Contains))
    {
        context.Pass("Correct Answer");
    }
    else
    {
        context.Fail("Wrong answer", 
        "Think of using Hashtables!!");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 4 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 4 not complete");
    }
});

#!markdown

# [Question]

#!markdown

# Challenge 4: Two number Sum

#!markdown

XYZ

#!csharp

TwoSum = (array,targetSum) =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

# [Scratchpad]

#!csharp

#!model-answer
// this should pass

TwoSum = (array,targetSum) => 
{   
	List<int> answer = new List<int>();
	Dictionary < int, int > hashmap = new Dictionary < int, int > ();
	
	foreach(int x in array){
		int reqSum = targetSum-x;
		if(hashmap.ContainsKey(reqSum))
			return new int[]{x,reqSum};
		hashmap[x]=1;
	}
		return new int[2];
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge] 3 Sum

#!csharp

Func<int[],int,List<int[]>> ThreeSum = (inputArray,targetSum) => new List<int[]>();

#!csharp

Lesson.CurrentChallenge.AddRule("Checking for Two Sum", context =>
{
    var correctAns = new List<int[]>(){new int[]{-8,3,5},new int[]{-8,2,6},new int[]{-6,1,5}};
    var array = new int[]{12,3,1,2,-6,5,-8,6};
    var targetSum = 0;
    var ans = ThreeSum(array,targetSum);
    bool flag = true;
    foreach(int[] arr in ans){
        if(!correctAns.Any(a => a.SequenceEqual(arr)))
        {
            flag = false;
        }
    }
    if (flag)
    {
        context.Pass("Correct Answer");
    }
    else
    {
        context.Fail("Wrong answer",      
        "Try sorting and traversing it once.At each number,place a left pointer on the number immediately to the right of your current number and a right pointer on the final number in the array. Check if the current Number, the left number, and the right number sum up to the target sum. Remember and keep in mind, that the array is sorted!!");
    }
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
{
    var numPassed = context.RuleEvaluations.Count(e => e.Passed);
    var total = context.RuleEvaluations.Count();
    
    if (total == numPassed)
    {
        context.SetMessage("Challenge 5 completed!");
        await context.StartNextChallengeAsync();
    }
    else
    {
        context.SetMessage("Challenge 5 not complete");
    }
});

#!markdown

# [Question]

#!markdown

# Challenge 5: Three Sum

#!markdown

XYZ

#!csharp

ThreeSum = (array,targetSum) =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

# [Scratchpad]

#!csharp

#!model-answer
// this should pass

ThreeSum = (array,targetSum) => 
{   
	Array.Sort(array);
	List<int[]> triplets = new List<int[]>();
	for(int i = 0; i <array.Length - 2;i++){
		int left = i+1;
		int right = array.Length - 1;
		while(left < right){
			int currentSum = array[i]+array[left]+array[right];
			if(currentSum == targetSum){
				int[] newTriplet = {array[i], array[left], array[right]};
				triplets.Add(newTriplet);
				left++;
				right--;
			} else if(currentSum < targetSum){
				left++;
			}
			else if(currentSum > targetSum){
				right--;
			}
		}
	}
	return triplets;
};

#!csharp

Lesson.ResetChallenge();
