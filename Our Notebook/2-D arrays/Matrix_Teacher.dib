#!csharp

#r "nuget: Interactive.Journey"
#r "nuget: Interactive.Extension.ImageSharp, *-*"

#!csharp

using Microsoft.DotNet.Interactive.Journey;
using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Commands;
using Microsoft.DotNet.Interactive.CSharp;
using Microsoft.DotNet.Interactive.Events;
using SixLabors.ImageSharp;
using System.IO;

#!markdown

# [Challenge]Matrix Multiplication

#!csharp

Func<int[,], int[,], int[,]> Multiply = (mat1, mat2) => new int[0,0];

#!csharp

Lesson.CurrentChallenge.AddRule("Matrix Multiplication", context =>
{   
    // int[,] mat1 = new int[,]{
    //     {1, 1, 1, 1},
    //     {2, 2, 2, 2},
    //     {3, 3, 3, 3},
    //     {4, 4, 4, 4}
    // };

    // int[,] mat2 = new int[,]{
    //     {1, 1, 1, 1},
    //     {2, 2, 2, 2},
    //     {3, 3, 3, 3},
    //     {4, 4, 4, 4}
    // };

    int[,] mat1 = new int[,]{
        {1, 1},
        {2, 2},
        {3, 3}
    };

    int[,] mat2 = new int[,]{
        {1, 1, 1},
        {2, 2, 2}
    };

    int[,] correctans = new int[,]{
       {3, 3, 3},
       {6, 6, 6},
       {9, 9, 9}
    };
    
    // 10    10    10    10    
    // 20    20    20    20    
    // 30    30    30    30    
    // 40    40    40    40 

    // int[,] correctans = new int[,]{{10, 10, 10, 10},{20, 20, 20, 20},{30, 30, 30, 30},{40, 40, 40, 40}};

    int[,] ans = Multiply(mat1, mat2);

    for(int i = 0;i < correctans.GetLength(0); i++){
        for(int j = 0;j < correctans.GetLength(1); j++){
            if(correctans[i,j] != ans[i,j]){
                context.Fail("Incorrect answer");
            }
        }
    }

    context.Pass("Correct answer");
});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
    {
        var numPassed = context.RuleEvaluations.Count(e => e.Passed);
        var total = context.RuleEvaluations.Count();
        // var history = context.SubmissionHistory ....
        if (total == numPassed)
        {
            context.SetMessage("Challenge 1 completed! Proceed to next Challenge.");
            await context.StartNextChallengeAsync();
        }
        else
        {
            context.SetMessage("Challenge 1 not complete");
        }
    });

#!markdown

## [Question]

#!markdown

# Challenge 1 : Matrix Multiplication

#!markdown

In this challenge, you will be writing an algorithm for multiplying two given matrices. 

Your will write your answer as a lambda and assign it to `Multiply`. The lambda should have type `Func<int[,], int[,], int[,]>`.

It should return a 2-D matrix which is the result of multiplication of two given matrices.

(Note : It is always possible to multiply two matrices i.e, columns of first matrix is equal to number of rows of second matrix).

#!csharp

Multiply = (mat1, mat2) =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

## [Scratchpad]

#!csharp

#!model-answer
// this should pass

Multiply = (mat1, mat2) => 
{
    int n = mat1.GetLength(0);
    int m = mat2.GetLength(1);

    int[,] ans = new int[n,m];

    for(int i = 0;i < n; i++){
        for(int j = 0; j < m;j++){
            for(int k = 0;k < mat1.GetLength(1); k++){
                ans[i,j] += mat1[i,k] * mat2[k,j];
            }
        }
    }

    return ans;
};

#!csharp

Lesson.ResetChallenge();

#!markdown

# [Challenge]Spiral Matrix

#!csharp

Func<int[,], IEnumerable<int>> Spiral = (mat1) => Enumerable.Empty<int>();

#!csharp

Lesson.CurrentChallenge.AddRule("Spiral of Matrix", context =>
{   
    int[,] mat1 = new int[,]{
        {1, 1, 1, 1},
        {2, 2, 2, 2},
        {3, 3, 3, 3},
        {4, 4, 4, 4}
    };

    var correctans = new int[]{1, 1, 1, 1, 2, 3, 4, 4, 4, 4, 3, 2, 2, 2, 3, 3};
    var ans = Spiral(mat1);

    if (correctans.SequenceEqual(ans))
    {
        context.Pass("Correct answer");
    }
    else
    {
        context.Fail("Incorrect answer");
    }

});

#!csharp

Lesson.CurrentChallenge.OnCodeSubmitted(async context =>
    {
        var numPassed = context.RuleEvaluations.Count(e => e.Passed);
        var total = context.RuleEvaluations.Count();
        // var history = context.SubmissionHistory ....
        if (total == numPassed)
        {
            context.SetMessage("Challenge 2 completed! Proceed to next Challenge.");
            await context.StartNextChallengeAsync();
        }
        else
        {
            context.SetMessage("Challenge 2 not complete");
        }
    });

#!markdown

## [Question]

#!markdown

# Challenge 2 : Spiral of Matrix

#!markdown

In this challenge, you will be writing an algorithm for displaying elements of an array in spiral way. 

Your will write your answer as a lambda and assign it to `Spiral`. The lambda should have type `Func<int[,], IEnumerable<int>>`.

It should return a list of elements of matrix in spiral way.

#!csharp

Spiral = (mat1) =>
{
    throw new NotImplementedException(); // write your answer here
};

#!markdown

## [Scratchpad]

#!csharp

#!model-answer
// this should pass

Spiral = (mat1) => 
{
    int n = mat1.GetLength(0);
    int m = mat1.GetLength(1);

    int total = n*m;
    int count = 0;

    var ans = new List<int>();

    int minr = 0;
    int minc = 0;
    int maxr = n-1;
    int maxc = m-1;

    while(count < total){
        for(int i = minc; i <= maxc && count < total; i++){
            ans.Add(mat1[minr, i]);
            count++;
        }
        minr++;

        for(int i = minr; i <= maxr && count < total;i++){
            ans.Add(mat1[i,maxc]);
            count++;
        }
        maxc--;

        for(int i = maxc; i >= minc && count < total; i--){
            ans.Add(mat1[maxr, i]);
            count++;
        }
        maxr--;

        for(int i = maxr; i >= minr && count < total; i--){
            ans.Add(mat1[i, minc]);
            count++;
        }
        minc++;

    }

    return ans;
};

#!csharp

Lesson.ResetChallenge();
